{"version":3,"sources":["App/components/Board/BoardTile/BoardTile.js","App/components/Board/board.js","App/feather-client.js","App/components/Board/BoardModal/BoardModal.js","App/Screens/Dashboard/index.js","App/utils/appDataLoader.js","App/Screens/Auth/SignIn/index.js","App/App.js","App/Store/Reducers/appReducer.js","App/Store/Reducers/authReducer.js","App/Store/Actions/handle-drop.js","App/Store/Reducers/dashboardReducer.js","App/Store/Reducers/index.js","App/Store/store.js","App/Store/localStorage.js","index.js"],"names":["DragSource","canDrag","props","isDragging","monitor","getItem","_id","beginDrag","component","endDrag","didDrop","getDropResult","connect","connectDragSource","dragSource","content","opacity","className","style","src","DropTarget","canDrop","hover","getClientOffset","isOver","shallow","drop","item","boardId","onUpdate","moved","connectDropTarget","dropTarget","isOverCurrent","itemType","getItemType","title","tiles","map","tile","feathers","require","restClient","rest","client","configure","fetch","window","authentication","storage","localStorage","getFeathersInstance","a","login","user","credentials","reAuthenticate","email","password","authenticate","strategy","Error","message","state","isBoardModalOpen","dashboard","boardModal","dispatch","useState","setTitle","toggleBoardModal","type","handleCreate","e","preventDefault","length","service","create","board","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Label","for","Input","name","id","placeholder","required","onChange","target","value","ModalFooter","Button","color","onClick","boards","mediaData","isbottomPanelOpen","bottomPanel","isBoardModelOpen","boardModel","auth","onBoardUpdate","aria-controls","aria-expanded","logout","Collapse","m","appDataLoader","mediaImages","find","_boards","_images","data","image","jwt_user","setEmail","setPassword","errorMessage","setErrorMessage","event","then","catch","error","outline","Alert","href","isLoading","root","loading","reducer","action","handleDrop","filter","removeItemFromCurrentBoard","b","_item","push","undefined","media","initState","rootReducer","combineReducers","appReducer","authReducer","dashboardReducer","persistedState","serializedState","JSON","parse","err","loadState","store","createStore","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.190c50ed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { DragSource } from \"react-dnd\";\r\nimport \"./BoardTile.css\";\r\nconst BoardTile = (props) => {\r\n  // These props are injected by React DnD,\r\n  // as defined by your `collect` function above:\r\n  const { content, isDragging, connectDragSource } = props;\r\n  const opacity = isDragging ? 0 : 1;\r\n\r\n  return connectDragSource(\r\n    <div className=\"tile\" style={{ opacity }}>\r\n      <img src={content} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Types = {\r\n  CARD: \"card\",\r\n};\r\n\r\nconst spec = {\r\n  canDrag(props) {\r\n    // You can disallow drag based on props\r\n    return true;\r\n  },\r\n\r\n  isDragging(props, monitor) {\r\n    // If your component gets unmounted while dragged\r\n    // (like a card in Kanban board dragged between lists)\r\n    // you can implement something like this to keep its\r\n    // appearance dragged:\r\n    return monitor.getItem()._id === props._id;\r\n  },\r\n\r\n  beginDrag(props, monitor, component) {\r\n    // Return the data describing the dragged item\r\n    const item = props;\r\n    return item;\r\n  },\r\n\r\n  endDrag(props, monitor, component) {\r\n    if (!monitor.didDrop()) {\r\n      // You can check whether the drop was successful\r\n      // or if the drag ended but nobody handled the drop\r\n      return;\r\n    }\r\n    // When dropped on a compatible target, do something.\r\n    // Read the original dragged item from getItem():\r\n    const item = monitor.getItem();\r\n\r\n    // You may also read the drop result from the drop target\r\n    // that handled the drop, if it returned an object from\r\n    // its drop() method.\r\n    const dropResult = monitor.getDropResult();\r\n\r\n    // This is a good place to call some Flux action\r\n    //CardActions.moveCardToList(item.id, dropResult.listId)\r\n    //props.onDropped(item);\r\n  },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDragSource: connect.dragSource(),\r\n    // You can ask the monitor about the current drag state:\r\n    isDragging: monitor.isDragging(),\r\n  };\r\n}\r\n\r\nexport default DragSource(Types.CARD, spec, collect)(BoardTile);\r\n","import React from \"react\";\r\nimport BoardTile from \"./BoardTile/BoardTile\";\r\nimport { DropTarget } from \"react-dnd\";\r\nimport \"./board.css\";\r\n\r\nconst Board = (props) => {\r\n  const { isOver, canDrop, connectDropTarget } = props;\r\n\r\n  // const onDrop = ({ id, boardId }) => {\r\n  //   //console.log(id + \" - \" + boardId);\r\n  // };\r\n\r\n  return connectDropTarget(\r\n    <div className={isOver ? \"card hovered\" : \"card\"}>\r\n      <header>{props.title || \"Board\"}</header>\r\n\r\n      <div className=\"list scrollbar scroll-style-2 flex-container flex-wrap\">\r\n        {props.tiles.map((tile) => (\r\n          <BoardTile\r\n            key={tile._id}\r\n            boardId={props._id}\r\n            {...tile}\r\n            // onDropped={onDrop}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Types = {\r\n  CARD: \"card\",\r\n};\r\n\r\n/**\r\n * Specifies the drop target contract.\r\n * All methods are optional.\r\n */\r\nconst spec = {\r\n  canDrop(props, monitor) {\r\n    // You can disallow drop based on props or item\r\n    //const item = monitor.getItem();\r\n    return true;\r\n    //return canMakeChessMove(item.fromPosition, props.position)\r\n  },\r\n\r\n  hover(props, monitor, component) {\r\n    // This is fired very often and lets you perform side effects\r\n    // in response to the hover. You can't handle enter and leave\r\n    // here—if you need them, put monitor.isOver() into collect() so you\r\n    // can use componentDidUpdate() to handle enter/leave.\r\n\r\n    // You can access the coordinates if you need them\r\n    const clientOffset = monitor.getClientOffset();\r\n    //const componentRect = findDOMNode(component).getBoundingClientRect();\r\n\r\n    // You can check whether we're over a nested drop target\r\n    const isOnlyThisOne = monitor.isOver({ shallow: true });\r\n\r\n    // You will receive hover() even for items for which canDrop() is false\r\n    const canDrop = monitor.canDrop();\r\n  },\r\n\r\n  drop(props, monitor, component) {\r\n    if (monitor.didDrop()) {\r\n      // If you want, you can check whether some nested\r\n      // target already handled drop\r\n      return;\r\n    }\r\n\r\n    // Obtain the dragged item\r\n    const item = monitor.getItem();\r\n    if (item.boardId === props._id) return;\r\n\r\n    props.onUpdate(item, props);\r\n    //console.log(props);\r\n    //console.log(item);\r\n    // You can do something with it\r\n    //ChessActions.movePiece(item.fromPosition, props.position)\r\n\r\n    // You can also do nothing and return a drop result,\r\n    // which will be available as monitor.getDropResult()\r\n    // in the drag source's endDrag() method\r\n    return { moved: true };\r\n  },\r\n};\r\n\r\n/**\r\n * Specifies which props to inject into your component.\r\n */\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDropTarget: connect.dropTarget(),\r\n    // You can ask the monitor about the current drag state:\r\n    isOver: monitor.isOver(),\r\n    isOverCurrent: monitor.isOver({ shallow: true }),\r\n    canDrop: monitor.canDrop(),\r\n    itemType: monitor.getItemType(),\r\n  };\r\n}\r\n\r\nexport default DropTarget(Types.CARD, spec, collect)(Board);\r\n","import io from \"socket.io-client\";\nconst feathers = require(\"@feathersjs/client\");\nconst rest = require(\"@feathersjs/rest-client\");\n\n//const server = \"http://localhost:3030\";\n//const socket = io(server);\n// Connect to the same as the browser URL (only in the browser)\nconst restClient = rest();\n\nconst client = feathers()\n  //.configure(feathers.socketio(socket))\n  .configure(restClient.fetch(window.fetch))\n  .configure(\n    feathers.authentication({\n      storage: window.localStorage,\n    })\n  );\n\nconst getFeathersInstance = async () => {\n  try {\n    let user = await login();\n    return { client, user: user.user };\n  } catch (err) {\n    return false;\n  }\n};\n\nconst login = async (credentials) => {\n  try {\n    if (!credentials) {\n      return await client.reAuthenticate();\n    } else {\n      let { email, password } = credentials;\n      return await client.authenticate({\n        strategy: \"local\",\n        email,\n        password,\n      });\n    }\n  } catch (err) {\n    throw Error({\n      message: \"Failed to login user!\",\n    });\n  }\n};\n\nexport { client, getFeathersInstance, login };\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nimport { getFeathersInstance } from \"./../../../feather-client\";\r\n\r\nfunction BoardModal(props) {\r\n  let { isBoardModalOpen, dispatch } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const toggleBoardModal = () => {\r\n    dispatch({ type: \"board-modal\" });\r\n  };\r\n\r\n  const handleCreate = async (e) => {\r\n    e.preventDefault();\r\n    let { client } = await getFeathersInstance();\r\n    if (title.length > 0) {\r\n      const board = await client.service(\"boards\").create({ title });\r\n      dispatch({ type: \"push-board\", board });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={isBoardModalOpen} toggle={toggleBoardModal}>\r\n      <ModalHeader>Create New Board</ModalHeader>\r\n      <ModalBody>\r\n        <Form onSubmit={handleCreate}>\r\n          <FormGroup>\r\n            <Label for=\"board-title\">Title</Label>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              id=\"board-title\"\r\n              placeholder=\"Enter board title!\"\r\n              required\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={handleCreate}>\r\n          Create\r\n        </Button>{\" \"}\r\n        <Button color=\"secondary\" onClick={toggleBoardModal}>\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    isBoardModalOpen: state.dashboard.boardModal,\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps)(BoardModal);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Collapse, Button } from \"reactstrap\";\r\nimport \"./index.css\";\r\nimport Board from \"./../../components/Board/board\";\r\nimport BoardTile from \"./../../components/Board/BoardTile/BoardTile\";\r\nimport BoardModal from \"./../../components/Board/BoardModal/BoardModal\";\r\nimport { client } from \"./../../feather-client\";\r\n\r\nfunction Dashboard(props) {\r\n  let { user, boards, mediaData, isbottomPanelOpen, dispatch } = props;\r\n\r\n  const toggle = () => dispatch({ type: \"bottom-panel\" });\r\n\r\n  const onBoardUpdate = (item, board) => {\r\n    dispatch({ type: \"handle-drop\", item, board });\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    client.logout();\r\n    dispatch({ type: \"logout-user\" });\r\n    dispatch({ type: \"clear-storage\" });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"ui\">\r\n        <nav className=\"navbar app\">\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={toggle}\r\n            aria-controls=\"media-footer\"\r\n            aria-expanded={isbottomPanelOpen}\r\n          >\r\n            {isbottomPanelOpen ? \"Hide Media\" : \" Show Media\"}\r\n          </Button>\r\n          <span>Welcome: {user.email}</span>\r\n\r\n          <Button color=\"primary\" onClick={logoutUser}>\r\n            Logout\r\n          </Button>\r\n        </nav>\r\n\r\n        <nav className=\"navbar board\">\r\n          <span>Boards</span>\r\n          <Button\r\n            color=\"primary btn-plus\"\r\n            onClick={() => dispatch({ type: \"board-modal\" })}\r\n          >\r\n            New board\r\n          </Button>\r\n        </nav>\r\n\r\n        <BoardModal />\r\n\r\n        <div className=\"lists\">\r\n          {boards.map((board) => {\r\n            return (\r\n              <Board key={board._id} {...board} onUpdate={onBoardUpdate} />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <Collapse isOpen={isbottomPanelOpen}>\r\n        <div className=\"footer\" id=\"media-footer\">\r\n          <div className=\"flex-container flex-wrap\">\r\n            {mediaData.map((m) => (\r\n              <BoardTile key={m._id} {...m} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    boards: state.dashboard.boards,\r\n    mediaData: state.dashboard.mediaData,\r\n    isbottomPanelOpen: state.dashboard.bottomPanel,\r\n    isBoardModelOpen: state.dashboard.boardModel,\r\n    user: state.auth.user,\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps)(Dashboard);\r\n","import { getFeathersInstance } from \"../feather-client\";\r\n\r\nconst appDataLoader = async () => {\r\n  let boards = [];\r\n  let mediaImages = [];\r\n  let { client, user } = await getFeathersInstance();\r\n  if (client) {\r\n    try {\r\n      const _boards = await client.service(\"boards\").find();\r\n      const _images = await client.service(\"images\").find();\r\n      mediaImages = _images.data.map((image) => {\r\n        image[\"type\"] = \"media\";\r\n        return image;\r\n      });\r\n      boards = _boards.data.map((board) => {\r\n        board[\"tiles\"] = [];\r\n        return board;\r\n      });\r\n      return { mediaImages, boards, jwt_user: user };\r\n    } catch (err) {\r\n      return { mediaImages, boards, jwt_user: false };\r\n    }\r\n  } else {\r\n    return { mediaImages, boards, jwt_user: false };\r\n  }\r\n};\r\nexport default appDataLoader;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"./../../../feather-client\";\r\nimport \"./index.css\";\r\nimport appDataLoader from \"./../../../utils/appDataLoader\";\r\n\r\nconst SignIn = (props) => {\r\n  const { dispatch } = props;\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleLogin = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (email.length <= 0 || password.length <= 0) {\r\n      setErrorMessage(\"Email & password is required\");\r\n      return;\r\n    }\r\n    let credentials = {\r\n      email,\r\n      password,\r\n    };\r\n\r\n    login(credentials)\r\n      .then(async (data) => {\r\n        dispatch({ type: \"app-loading\", state: true });\r\n        const { boards, mediaImages } = await appDataLoader();\r\n        dispatch({\r\n          type: \"update-app-data\",\r\n          mediaImages,\r\n          boards,\r\n        });\r\n\r\n        dispatch({ type: \"app-loading\", state: false });\r\n        dispatch({ type: \"login-user\", user: data.user });\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(\"Username/Password is invalid!\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"pt-5\">\r\n      <h1 className=\"text-center\">Login</h1>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-5 mx-auto\">\r\n            <div className=\"card card-body\">\r\n              <Form onSubmit={handleLogin}>\r\n                <FormGroup>\r\n                  <Label for=\"exampleEmail\">Email</Label>\r\n                  <Input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"exampleEmail\"\r\n                    placeholder=\"with a placeholder\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label for=\"examplePassword\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    required\r\n                    name=\"password\"\r\n                    id=\"examplePassword\"\r\n                    placeholder=\"password placeholder\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button\r\n                    className=\"btn-block\"\r\n                    outline\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                  >\r\n                    Login\r\n                  </Button>\r\n                </FormGroup>\r\n              </Form>\r\n              {errorMessage.length > 0 ? (\r\n                <Alert color=\"danger\">{errorMessage}</Alert>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <p className=\"small-xl pt-3 text-center\">\r\n                <span className=\"text-muted\">Not a member?</span>\r\n                <a href=\"#\">Sign up</a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    user: state.auth.user,\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps)(SignIn);\r\n","import React, { useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport Dashboard from \"./Screens/Dashboard\";\nimport SignIn from \"./Screens/Auth/SignIn\";\nimport Loading from \"react-fullscreen-loading\";\n\nimport appDataLoader from \"./utils/appDataLoader\";\nfunction App(props) {\n  const { isLoading, user, dispatch } = props;\n\n  //if (isLoading) {\n  //return <Loading loading background=\"#0079bf\" loaderColor=\"#fff\" />;\n  //} else {\n  return user ? <Dashboard /> : <SignIn />;\n  //}\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    isLoading: state.root.loading,\n    user: state.auth.user,\n  };\n};\n\nexport default connect(mapStatetoProps)(App);\n","const reducer = (\r\n  state = {\r\n    loading: true,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"app-loading\":\r\n      return { ...state, loading: action.state };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","const reducer = (\r\n  state = {\r\n    user: false,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"login-user\":\r\n      return { user: action.user };\r\n    case \"logout-user\":\r\n      return { user: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","const removeItemFromCurrentBoard = function (boards, item) {\r\n  return boards.map((board) => {\r\n    if (board._id === item.boardId) {\r\n      board.tiles = board.tiles.filter((tile) => tile._id !== item._id);\r\n      return board;\r\n    }\r\n    return board;\r\n  });\r\n};\r\n\r\nconst handleDrop = function (state, item, board) {\r\n  let boards = removeItemFromCurrentBoard(state.boards, item).map((b) => {\r\n    if (b._id === board._id) {\r\n      let _item = {\r\n        ...item,\r\n        boardId: board._id,\r\n      };\r\n      b.tiles.push(_item);\r\n      return b;\r\n    }\r\n    return b;\r\n  });\r\n\r\n  let mediaData = state.mediaData;\r\n  // check media item\r\n  if (typeof item.type !== undefined && item.type === \"media\") {\r\n    mediaData = mediaData.filter((media) => media._id !== item._id);\r\n  }\r\n\r\n  return { ...state, boards, mediaData };\r\n};\r\n\r\nexport default handleDrop;\r\n","import handleDrop from \"./../Actions/handle-drop\";\r\n\r\nconst initState = {\r\n  boards: [],\r\n  mediaData: [],\r\n  bottomPanel: false,\r\n  boardModal: false,\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"handle-drop\":\r\n      return handleDrop(state, action.item, action.board);\r\n    case \"update-app-data\":\r\n      return { ...state, mediaData: action.mediaImages, boards: action.boards };\r\n    case \"bottom-panel\":\r\n      return { ...state, bottomPanel: !state.bottomPanel };\r\n    case \"board-modal\":\r\n      return { ...state, boardModal: !state.boardModal };\r\n    case \"push-board\":\r\n      const boards = [...state.boards];\r\n      const board = action.board;\r\n      board[\"tiles\"] = [];\r\n      boards.push(board);\r\n      return { ...state, boards, boardModal: false };\r\n    case \"clear-storage\":\r\n      return initState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport appReducer from \"./appReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport dashboardReducer from \"./dashboardReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  root: appReducer,\r\n  auth: authReducer,\r\n  dashboard: dashboardReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose } from \"redux\";\r\nimport rootReducer from \"./Reducers/\";\r\nimport { saveState, loadState } from \"./localStorage\";\r\nimport throttle from \"lodash.throttle\";\r\n\r\nconst persistedState = loadState();\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\nstore.subscribe(\r\n  throttle(() => {\r\n    saveState(store.getState());\r\n  }, 1000)\r\n);\r\n\r\nexport default store;\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport store from \"./App/Store/store\";\n\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}